module Main
where
 
import Libaddutil.Vector
import System.IO
import Control.Monad.Reader
import Prelude hiding (catch)
import Freekick.Libsoccer.MatchInfo
import Freekick.Libsoccer.Club
import Freekick.Libsoccer.Player
import Libaddutil.Net
import Freekick.Libsoccer.MatchCommon
import Control.Concurrent
import Control.Concurrent.STM
import qualified Data.Map


{-
data AITree = AIState AITree 
            | AIAction


Idle -> Not on the ball -> Near to ball  -> Opponents nearby -> Ball in the air    -> !Estimate landing point and do heading
                                                             -> Ball on the ground -> Ball, opponent not too fast -> !Run to ball
                                                                                      Ball/opponent too fast      -> !Tackle
                                         -> No opponents     -> !Run to ball
                        -> Far from ball -> !Go to position as in formation
     -> On the ball     -> Peaceful -> Teammate in good position -> !Pass
                                    -> I'm near goal             -> !Shoot
                                    -> Otherwise                 -> !Dribble
                        -> Danger   -> Teammate in good position -> !Pass
                                    -> Near own goal             -> !Long ball
                                    -> Near their goal           -> !Shoot
                                    -> Otherwise                 -> There's room -> !Flip
                                                                 -> No room      -> !Do decoy/trick

Flow


Start -> Kickoff -> Play -> Goal -> Kickoff
                         -> Out (side) -> Throwin -> Play
                         -> Half time/full time
                         -> Out (end, own side) -> Corner kick -> Play
                         -> Out (end, other side) -> Goal kick -> Play
                         -> Foul -> Free kick -> Play

Physics:

Decision -> Player data -> Player injured? -> Yes -> !Lie down
                                              no -> Player in the air? (Tackled/jumping) -> Yes -> !Calculate default
                                                                                            No  -> Player just kicked?
  Player just kicked? -> Yes -> Lower the kick timer
                         No  -> Player just tackled/was tackled? -> No -> ...
  ... Decision to Move/run/jump -> !Calculate as decided
                  Kick/pass/dribble -> Ball near enough -> Yes -> !Calculate ball as decided
                                                           no  -> !calculate default
                  tackle -> !get down -> another player there -> no -> !calculate
                                                                yes -> !knock player down -> injured? -> yes -> !injure player
                                                                                                         no -> !calculate
                                Player just tackled/was tackled? -> Yes -> !lower tackle timer -> tackle timer down? -> no -> !stay down
                                                                                                                        yes -> get up

Player data
injury level/counter
location
angle
velocity
acceleration
down counter (tackled)
kick counter
fatigue level

http://en.wikipedia.org/wiki/Tree_(data_structure)
http://en.wikipedia.org/wiki/Decision_tree
http://en.wikipedia.org/wiki/Alternating_decision_tree
http://en.wikipedia.org/wiki/Decision_tree_learning
http://en.wikipedia.org/wiki/Grafting_(computer)
http://en.wikipedia.org/wiki/Binary_decision_diagram
http://en.wikipedia.org/wiki/Graph_theory
http://en.wikipedia.org/wiki/Artificial_neural_network
http://en.wikipedia.org/wiki/Dynamic_programming
http://de.wikipedia.org/wiki/Mustererkennung
http://en.wikipedia.org/wiki/Artificial_intelligence
http://de.wikipedia.org/wiki/Gerichteter_azyklischer_Graph
http://en.wikipedia.org/wiki/Fuzzy_system
http://en.wikipedia.org/wiki/Supervised_learning
http://en.wikipedia.org/wiki/Boolean_satisfiability_problem

-}


server :: String
server = "127.0.0.1"

port :: Int
port   = 32105

main :: IO ()
main = connect server port start
 
start :: Net ()
start = do
    h <- asks socket
    t <- io $ hGetLine h
    let c :: MatchInfo
        c = read t
    let m = createMatchStatusFromMatchInfo c
    matchBox <- io $ atomically $ newTVar m
    io $ putStrLn $ name $ homecl c
    io $ putStrLn $ name $ awaycl c
    send "\nOK"
    io $ forkOS $ controlsSender h matchBox 100000
    listen h (eventHandler matchBox)

controlsSender :: Handle -> TVar MatchStatus -> Int -> IO ()
controlsSender h mb i = do
    m <- atomically $ readTVar mb
    let dc = createControls m
    hPutStrLn h dc
    when (i > 0) $ do
        threadDelay i
        controlsSender h mb i

createControls :: MatchStatus -> String
createControls m = concat $ map (createControl m) (Data.Map.elems (players m))

createControl :: MatchStatus -> PlayerInfo -> String
createControl m p = "(" ++ c ++ " " ++ (show x) ++ " " ++ (show y) ++ " " ++ (show z) ++ " " ++ (show plid) ++ ")"
    where c        = "a"
          y        = 0 :: Int
          (x,_, z) = vectorFromTo (plentity p) (ballentity (ball m))
          plid     = idnum (staticplayer p)
          
eventHandler :: TVar MatchStatus -> String -> Net ()
eventHandler mb s = do
    m <- io $ atomically $ readTVar mb
    when (not (null (events s))) $ io $ putStrLn (head (events s))
    let mnew = handleEvents (events s) m
    io $ atomically $ writeTVar mb mnew

handleEvents :: [String] -> MatchStatus -> MatchStatus
handleEvents []     m = m
handleEvents (e:es) m = handleEvents es (handleEvent m e)

handleEvent :: MatchStatus -> String -> MatchStatus
handleEvent m s = case inputType s of
                  Invalid      -> m
                  Update       -> m{players = Data.Map.insert upplid uppl (players m)}
                  Status Pause -> m
                  Status Time  -> m
                  Status Score -> m
                  _            -> m
    where upplid    = read $ head $ words s
          uppl      = applyEventOnPlayer s (Data.Map.findWithDefault (error "handleEvent: Player not found?") upplid (players m))

